# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ester_wrap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ester_wrap')
    _ester_wrap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ester_wrap', [dirname(__file__)])
        except ImportError:
            import _ester_wrap
            return _ester_wrap
        try:
            _mod = imp.load_module('_ester_wrap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ester_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _ester_wrap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _ester_wrap.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _ester_wrap.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _ester_wrap.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _ester_wrap.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_ester_wrap.doubleArray_frompointer)
    else:
        frompointer = _ester_wrap.doubleArray_frompointer
doubleArray_swigregister = _ester_wrap.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _ester_wrap.doubleArray_frompointer(t)
doubleArray_frompointer = _ester_wrap.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _ester_wrap.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _ester_wrap.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _ester_wrap.intArray___setitem__(self, index, value)

    def cast(self):
        return _ester_wrap.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_ester_wrap.intArray_frompointer)
    else:
        frompointer = _ester_wrap.intArray_frompointer
intArray_swigregister = _ester_wrap.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _ester_wrap.intArray_frompointer(t)
intArray_frompointer = _ester_wrap.intArray_frompointer

class matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ester_wrap.delete_matrix
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nrows(self):
        return _ester_wrap.matrix_nrows(self)

    def ncols(self):
        return _ester_wrap.matrix_ncols(self)

    def data(self):
        return _ester_wrap.matrix_data(self)

    def dim(self, nrow, ncol):
        return _ester_wrap.matrix_dim(self, nrow, ncol)

    def redim(self, nrow, ncol):
        return _ester_wrap.matrix_redim(self, nrow, ncol)

    def __call__(self, *args):
        return _ester_wrap.matrix___call__(self, *args)

    def read(self, *args):
        return _ester_wrap.matrix_read(self, *args)

    def write(self, *args):
        return _ester_wrap.matrix_write(self, *args)

    def write_fmt(self, *args):
        return _ester_wrap.matrix_write_fmt(self, *args)

    def swap(self, arg2):
        return _ester_wrap.matrix_swap(self, arg2)

    def zero(self, nrows, ncols):
        return _ester_wrap.matrix_zero(self, nrows, ncols)

    def values(self, arg2):
        return _ester_wrap.matrix_values(self, arg2)

    def __add__(self, *args):
        return _ester_wrap.matrix___add__(self, *args)

    def __sub__(self, *args):
        return _ester_wrap.matrix___sub__(self, *args)

    def __mul__(self, *args):
        return _ester_wrap.matrix___mul__(self, *args)

    def __truediv__(self, *args):
        return _ester_wrap.matrix___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, *args):
        return _ester_wrap.matrix___eq__(self, *args)

    def __ne__(self, *args):
        return _ester_wrap.matrix___ne__(self, *args)

    def __gt__(self, *args):
        return _ester_wrap.matrix___gt__(self, *args)

    def __lt__(self, *args):
        return _ester_wrap.matrix___lt__(self, *args)

    def __ge__(self, *args):
        return _ester_wrap.matrix___ge__(self, *args)

    def __le__(self, *args):
        return _ester_wrap.matrix___le__(self, *args)

    def __iadd__(self, *args):
        return _ester_wrap.matrix___iadd__(self, *args)

    def __isub__(self, *args):
        return _ester_wrap.matrix___isub__(self, *args)

    def __imul__(self, *args):
        return _ester_wrap.matrix___imul__(self, *args)

    def __itruediv__(self, *args):
        return _ester_wrap.matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def row(self, irow):
        return _ester_wrap.matrix_row(self, irow)

    def col(self, icol):
        return _ester_wrap.matrix_col(self, icol)

    def block(self, irow1, irow2, icol1, icol2):
        return _ester_wrap.matrix_block(self, irow1, irow2, icol1, icol2)

    def block_step(self, irow1, irow2, drow, icol1, icol2, dcol):
        return _ester_wrap.matrix_block_step(self, irow1, irow2, drow, icol1, icol2, dcol)

    def setrow(self, irow, arg3):
        return _ester_wrap.matrix_setrow(self, irow, arg3)

    def setcol(self, icol, arg3):
        return _ester_wrap.matrix_setcol(self, icol, arg3)

    def setblock(self, irow1, irow2, icol1, icol2, arg6):
        return _ester_wrap.matrix_setblock(self, irow1, irow2, icol1, icol2, arg6)

    def setblock_step(self, irow1, irow2, drow, icol1, icol2, dcol, arg8):
        return _ester_wrap.matrix_setblock_step(self, irow1, irow2, drow, icol1, icol2, dcol, arg8)

    def concatenate(self, a, dir=0):
        return _ester_wrap.matrix_concatenate(self, a, dir)

    def transpose(self):
        return _ester_wrap.matrix_transpose(self)

    def fliplr(self):
        return _ester_wrap.matrix_fliplr(self)

    def flipud(self):
        return _ester_wrap.matrix_flipud(self)

    def solve(self, arg2):
        return _ester_wrap.matrix_solve(self, arg2)

    def inv(self):
        return _ester_wrap.matrix_inv(self)
matrix_swigregister = _ester_wrap.matrix_swigregister
matrix_swigregister(matrix)

def ones(nfil, ncol):
    return _ester_wrap.ones(nfil, ncol)
ones = _ester_wrap.ones

def zeros(nfil, ncol):
    return _ester_wrap.zeros(nfil, ncol)
zeros = _ester_wrap.zeros

def random_matrix(nfil, ncol):
    return _ester_wrap.random_matrix(nfil, ncol)
random_matrix = _ester_wrap.random_matrix

def vector(x0, x1, n):
    return _ester_wrap.vector(x0, x1, n)
vector = _ester_wrap.vector

def vector_t(x0, x1, n):
    return _ester_wrap.vector_t(x0, x1, n)
vector_t = _ester_wrap.vector_t

def sum(arg1):
    return _ester_wrap.sum(arg1)
sum = _ester_wrap.sum

def mean(arg1):
    return _ester_wrap.mean(arg1)
mean = _ester_wrap.mean

def max(*args):
    return _ester_wrap.max(*args)
max = _ester_wrap.max

def min(*args):
    return _ester_wrap.min(*args)
min = _ester_wrap.min

def exist(arg1):
    return _ester_wrap.exist(arg1)
exist = _ester_wrap.exist

def isequal(arg1, arg2):
    return _ester_wrap.isequal(arg1, arg2)
isequal = _ester_wrap.isequal

def cos(arg1):
    return _ester_wrap.cos(arg1)
cos = _ester_wrap.cos

def sin(arg1):
    return _ester_wrap.sin(arg1)
sin = _ester_wrap.sin

def tan(arg1):
    return _ester_wrap.tan(arg1)
tan = _ester_wrap.tan

def acos(arg1):
    return _ester_wrap.acos(arg1)
acos = _ester_wrap.acos

def asin(arg1):
    return _ester_wrap.asin(arg1)
asin = _ester_wrap.asin

def atan(arg1):
    return _ester_wrap.atan(arg1)
atan = _ester_wrap.atan

def cosh(arg1):
    return _ester_wrap.cosh(arg1)
cosh = _ester_wrap.cosh

def sinh(arg1):
    return _ester_wrap.sinh(arg1)
sinh = _ester_wrap.sinh

def tanh(arg1):
    return _ester_wrap.tanh(arg1)
tanh = _ester_wrap.tanh

def exp(arg1):
    return _ester_wrap.exp(arg1)
exp = _ester_wrap.exp

def log(arg1):
    return _ester_wrap.log(arg1)
log = _ester_wrap.log

def log10(arg1):
    return _ester_wrap.log10(arg1)
log10 = _ester_wrap.log10

def sqrt(arg1):
    return _ester_wrap.sqrt(arg1)
sqrt = _ester_wrap.sqrt

def abs(arg1):
    return _ester_wrap.abs(arg1)
abs = _ester_wrap.abs

def floor(arg1):
    return _ester_wrap.floor(arg1)
floor = _ester_wrap.floor

def ceil(arg1):
    return _ester_wrap.ceil(arg1)
ceil = _ester_wrap.ceil

def round(arg1):
    return _ester_wrap.round(arg1)
round = _ester_wrap.round

def atan2(*args):
    return _ester_wrap.atan2(*args)
atan2 = _ester_wrap.atan2

def pow(*args):
    return _ester_wrap.pow(*args)
pow = _ester_wrap.pow

class matrix_block_diag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix_block_diag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix_block_diag, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ester_wrap.delete_matrix_block_diag
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_matrix_block_diag(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_nblocks(self, nblocks):
        return _ester_wrap.matrix_block_diag_set_nblocks(self, nblocks)

    def full_matrix(self):
        return _ester_wrap.matrix_block_diag_full_matrix(self)

    def block(self, *args):
        return _ester_wrap.matrix_block_diag_block(self, *args)

    def nblocks(self):
        return _ester_wrap.matrix_block_diag_nblocks(self)

    def nrows(self):
        return _ester_wrap.matrix_block_diag_nrows(self)

    def ncols(self):
        return _ester_wrap.matrix_block_diag_ncols(self)

    def __truediv__(self, *args):
        return _ester_wrap.matrix_block_diag___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, arg2):
        return _ester_wrap.matrix_block_diag___add__(self, arg2)

    def __sub__(self, arg2):
        return _ester_wrap.matrix_block_diag___sub__(self, arg2)

    def __mul__(self, *args):
        return _ester_wrap.matrix_block_diag___mul__(self, *args)

    def row(self, n):
        return _ester_wrap.matrix_block_diag_row(self, n)

    def __call__(self, nfil, ncol):
        return _ester_wrap.matrix_block_diag___call__(self, nfil, ncol)

    def transpose(self):
        return _ester_wrap.matrix_block_diag_transpose(self)
matrix_block_diag_swigregister = _ester_wrap.matrix_block_diag_swigregister
matrix_block_diag_swigregister(matrix_block_diag)

def eye(*args):
    return _ester_wrap.eye(*args)
eye = _ester_wrap.eye

class matrix_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix_map, name)
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _ester_wrap.matrix_map___call__(self, *args)

    def row(self, irow):
        return _ester_wrap.matrix_map_row(self, irow)

    def col(self, icol):
        return _ester_wrap.matrix_map_col(self, icol)

    def block(self, irow1, irow2, icol1, icol2):
        return _ester_wrap.matrix_map_block(self, irow1, irow2, icol1, icol2)

    def block_step(self, irow1, irow2, drow, icol1, icol2, dcol):
        return _ester_wrap.matrix_map_block_step(self, irow1, irow2, drow, icol1, icol2, dcol)

    def setrow(self, *args):
        return _ester_wrap.matrix_map_setrow(self, *args)

    def setcol(self, *args):
        return _ester_wrap.matrix_map_setcol(self, *args)

    def setblock(self, *args):
        return _ester_wrap.matrix_map_setblock(self, *args)

    def setblock_step(self, *args):
        return _ester_wrap.matrix_map_setblock_step(self, *args)

    def __mul__(self, *args):
        return _ester_wrap.matrix_map___mul__(self, *args)

    def __iadd__(self, d):
        return _ester_wrap.matrix_map___iadd__(self, d)

    def __isub__(self, d):
        return _ester_wrap.matrix_map___isub__(self, d)

    def __imul__(self, *args):
        return _ester_wrap.matrix_map___imul__(self, *args)

    def __itruediv__(self, *args):
        return _ester_wrap.matrix_map___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def sum(self):
        return _ester_wrap.matrix_map_sum(self)

    def __init__(self):
        this = _ester_wrap.new_matrix_map()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_matrix_map
    __del__ = lambda self: None
matrix_map_swigregister = _ester_wrap.matrix_map_swigregister
matrix_map_swigregister(matrix_map)

class create_matrix_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, create_matrix_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, create_matrix_map, name)
    __repr__ = _swig_repr

    def __init__(self, key, val):
        this = _ester_wrap.new_create_matrix_map(key, val)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, key, val):
        return _ester_wrap.create_matrix_map___call__(self, key, val)
    __swig_destroy__ = _ester_wrap.delete_create_matrix_map
    __del__ = lambda self: None
create_matrix_map_swigregister = _ester_wrap.create_matrix_map_swigregister
create_matrix_map_swigregister(create_matrix_map)

class tiempo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tiempo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tiempo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active"] = _ester_wrap.tiempo_active_set
    __swig_getmethods__["active"] = _ester_wrap.tiempo_active_get
    if _newclass:
        active = _swig_property(_ester_wrap.tiempo_active_get, _ester_wrap.tiempo_active_set)

    def __init__(self):
        this = _ester_wrap.new_tiempo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _ester_wrap.tiempo_reset(self)

    def start(self):
        return _ester_wrap.tiempo_start(self)

    def stop(self):
        return _ester_wrap.tiempo_stop(self)

    def value(self):
        return _ester_wrap.tiempo_value(self)
    __swig_destroy__ = _ester_wrap.delete_tiempo
    __del__ = lambda self: None
tiempo_swigregister = _ester_wrap.tiempo_swigregister
tiempo_swigregister(tiempo)

class nuc_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nuc_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nuc_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps"] = _ester_wrap.nuc_struct_eps_set
    __swig_getmethods__["eps"] = _ester_wrap.nuc_struct_eps_get
    if _newclass:
        eps = _swig_property(_ester_wrap.nuc_struct_eps_get, _ester_wrap.nuc_struct_eps_set)
    __swig_setmethods__["pp"] = _ester_wrap.nuc_struct_pp_set
    __swig_getmethods__["pp"] = _ester_wrap.nuc_struct_pp_get
    if _newclass:
        pp = _swig_property(_ester_wrap.nuc_struct_pp_get, _ester_wrap.nuc_struct_pp_set)
    __swig_setmethods__["cno"] = _ester_wrap.nuc_struct_cno_set
    __swig_getmethods__["cno"] = _ester_wrap.nuc_struct_cno_get
    if _newclass:
        cno = _swig_property(_ester_wrap.nuc_struct_cno_get, _ester_wrap.nuc_struct_cno_set)
    __swig_setmethods__["dlneps_lnrho"] = _ester_wrap.nuc_struct_dlneps_lnrho_set
    __swig_getmethods__["dlneps_lnrho"] = _ester_wrap.nuc_struct_dlneps_lnrho_get
    if _newclass:
        dlneps_lnrho = _swig_property(_ester_wrap.nuc_struct_dlneps_lnrho_get, _ester_wrap.nuc_struct_dlneps_lnrho_set)
    __swig_setmethods__["dlneps_lnT"] = _ester_wrap.nuc_struct_dlneps_lnT_set
    __swig_getmethods__["dlneps_lnT"] = _ester_wrap.nuc_struct_dlneps_lnT_get
    if _newclass:
        dlneps_lnT = _swig_property(_ester_wrap.nuc_struct_dlneps_lnT_get, _ester_wrap.nuc_struct_dlneps_lnT_set)
    __swig_setmethods__["name"] = _ester_wrap.nuc_struct_name_set
    __swig_getmethods__["name"] = _ester_wrap.nuc_struct_name_get
    if _newclass:
        name = _swig_property(_ester_wrap.nuc_struct_name_get, _ester_wrap.nuc_struct_name_set)

    def __init__(self):
        this = _ester_wrap.new_nuc_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_nuc_struct
    __del__ = lambda self: None
nuc_struct_swigregister = _ester_wrap.nuc_struct_swigregister
nuc_struct_swigregister(nuc_struct)

class eos_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eos_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eos_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["G1"] = _ester_wrap.eos_struct_G1_set
    __swig_getmethods__["G1"] = _ester_wrap.eos_struct_G1_get
    if _newclass:
        G1 = _swig_property(_ester_wrap.eos_struct_G1_get, _ester_wrap.eos_struct_G1_set)
    __swig_setmethods__["cp"] = _ester_wrap.eos_struct_cp_set
    __swig_getmethods__["cp"] = _ester_wrap.eos_struct_cp_get
    if _newclass:
        cp = _swig_property(_ester_wrap.eos_struct_cp_get, _ester_wrap.eos_struct_cp_set)
    __swig_setmethods__["del_ad"] = _ester_wrap.eos_struct_del_ad_set
    __swig_getmethods__["del_ad"] = _ester_wrap.eos_struct_del_ad_get
    if _newclass:
        del_ad = _swig_property(_ester_wrap.eos_struct_del_ad_get, _ester_wrap.eos_struct_del_ad_set)
    __swig_setmethods__["G3_1"] = _ester_wrap.eos_struct_G3_1_set
    __swig_getmethods__["G3_1"] = _ester_wrap.eos_struct_G3_1_get
    if _newclass:
        G3_1 = _swig_property(_ester_wrap.eos_struct_G3_1_get, _ester_wrap.eos_struct_G3_1_set)
    __swig_setmethods__["cv"] = _ester_wrap.eos_struct_cv_set
    __swig_getmethods__["cv"] = _ester_wrap.eos_struct_cv_get
    if _newclass:
        cv = _swig_property(_ester_wrap.eos_struct_cv_get, _ester_wrap.eos_struct_cv_set)
    __swig_setmethods__["d"] = _ester_wrap.eos_struct_d_set
    __swig_getmethods__["d"] = _ester_wrap.eos_struct_d_get
    if _newclass:
        d = _swig_property(_ester_wrap.eos_struct_d_get, _ester_wrap.eos_struct_d_set)
    __swig_setmethods__["prad"] = _ester_wrap.eos_struct_prad_set
    __swig_getmethods__["prad"] = _ester_wrap.eos_struct_prad_get
    if _newclass:
        prad = _swig_property(_ester_wrap.eos_struct_prad_get, _ester_wrap.eos_struct_prad_set)
    __swig_setmethods__["chi_rho"] = _ester_wrap.eos_struct_chi_rho_set
    __swig_getmethods__["chi_rho"] = _ester_wrap.eos_struct_chi_rho_get
    if _newclass:
        chi_rho = _swig_property(_ester_wrap.eos_struct_chi_rho_get, _ester_wrap.eos_struct_chi_rho_set)
    __swig_setmethods__["chi_T"] = _ester_wrap.eos_struct_chi_T_set
    __swig_getmethods__["chi_T"] = _ester_wrap.eos_struct_chi_T_get
    if _newclass:
        chi_T = _swig_property(_ester_wrap.eos_struct_chi_T_get, _ester_wrap.eos_struct_chi_T_set)
    __swig_setmethods__["s"] = _ester_wrap.eos_struct_s_set
    __swig_getmethods__["s"] = _ester_wrap.eos_struct_s_get
    if _newclass:
        s = _swig_property(_ester_wrap.eos_struct_s_get, _ester_wrap.eos_struct_s_set)
    __swig_setmethods__["name"] = _ester_wrap.eos_struct_name_set
    __swig_getmethods__["name"] = _ester_wrap.eos_struct_name_get
    if _newclass:
        name = _swig_property(_ester_wrap.eos_struct_name_get, _ester_wrap.eos_struct_name_set)

    def __init__(self):
        this = _ester_wrap.new_eos_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_eos_struct
    __del__ = lambda self: None
eos_struct_swigregister = _ester_wrap.eos_struct_swigregister
eos_struct_swigregister(eos_struct)

class opa_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opa_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opa_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["k"] = _ester_wrap.opa_struct_k_set
    __swig_getmethods__["k"] = _ester_wrap.opa_struct_k_get
    if _newclass:
        k = _swig_property(_ester_wrap.opa_struct_k_get, _ester_wrap.opa_struct_k_set)
    __swig_setmethods__["xi"] = _ester_wrap.opa_struct_xi_set
    __swig_getmethods__["xi"] = _ester_wrap.opa_struct_xi_get
    if _newclass:
        xi = _swig_property(_ester_wrap.opa_struct_xi_get, _ester_wrap.opa_struct_xi_set)
    __swig_setmethods__["dlnxi_lnrho"] = _ester_wrap.opa_struct_dlnxi_lnrho_set
    __swig_getmethods__["dlnxi_lnrho"] = _ester_wrap.opa_struct_dlnxi_lnrho_get
    if _newclass:
        dlnxi_lnrho = _swig_property(_ester_wrap.opa_struct_dlnxi_lnrho_get, _ester_wrap.opa_struct_dlnxi_lnrho_set)
    __swig_setmethods__["dlnxi_lnT"] = _ester_wrap.opa_struct_dlnxi_lnT_set
    __swig_getmethods__["dlnxi_lnT"] = _ester_wrap.opa_struct_dlnxi_lnT_get
    if _newclass:
        dlnxi_lnT = _swig_property(_ester_wrap.opa_struct_dlnxi_lnT_get, _ester_wrap.opa_struct_dlnxi_lnT_set)
    __swig_setmethods__["name"] = _ester_wrap.opa_struct_name_set
    __swig_getmethods__["name"] = _ester_wrap.opa_struct_name_get
    if _newclass:
        name = _swig_property(_ester_wrap.opa_struct_name_get, _ester_wrap.opa_struct_name_set)

    def __init__(self):
        this = _ester_wrap.new_opa_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_opa_struct
    __del__ = lambda self: None
opa_struct_swigregister = _ester_wrap.opa_struct_swigregister
opa_struct_swigregister(opa_struct)

class atm_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atm_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atm_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ps"] = _ester_wrap.atm_struct_ps_set
    __swig_getmethods__["ps"] = _ester_wrap.atm_struct_ps_get
    if _newclass:
        ps = _swig_property(_ester_wrap.atm_struct_ps_get, _ester_wrap.atm_struct_ps_set)
    __swig_setmethods__["Ts"] = _ester_wrap.atm_struct_Ts_set
    __swig_getmethods__["Ts"] = _ester_wrap.atm_struct_Ts_get
    if _newclass:
        Ts = _swig_property(_ester_wrap.atm_struct_Ts_get, _ester_wrap.atm_struct_Ts_set)
    __swig_setmethods__["dlnps_lng"] = _ester_wrap.atm_struct_dlnps_lng_set
    __swig_getmethods__["dlnps_lng"] = _ester_wrap.atm_struct_dlnps_lng_get
    if _newclass:
        dlnps_lng = _swig_property(_ester_wrap.atm_struct_dlnps_lng_get, _ester_wrap.atm_struct_dlnps_lng_set)
    __swig_setmethods__["dlnps_lnTeff"] = _ester_wrap.atm_struct_dlnps_lnTeff_set
    __swig_getmethods__["dlnps_lnTeff"] = _ester_wrap.atm_struct_dlnps_lnTeff_get
    if _newclass:
        dlnps_lnTeff = _swig_property(_ester_wrap.atm_struct_dlnps_lnTeff_get, _ester_wrap.atm_struct_dlnps_lnTeff_set)
    __swig_setmethods__["dlnTs_lng"] = _ester_wrap.atm_struct_dlnTs_lng_set
    __swig_getmethods__["dlnTs_lng"] = _ester_wrap.atm_struct_dlnTs_lng_get
    if _newclass:
        dlnTs_lng = _swig_property(_ester_wrap.atm_struct_dlnTs_lng_get, _ester_wrap.atm_struct_dlnTs_lng_set)
    __swig_setmethods__["dlnTs_lnTeff"] = _ester_wrap.atm_struct_dlnTs_lnTeff_set
    __swig_getmethods__["dlnTs_lnTeff"] = _ester_wrap.atm_struct_dlnTs_lnTeff_get
    if _newclass:
        dlnTs_lnTeff = _swig_property(_ester_wrap.atm_struct_dlnTs_lnTeff_get, _ester_wrap.atm_struct_dlnTs_lnTeff_set)
    __swig_setmethods__["name"] = _ester_wrap.atm_struct_name_set
    __swig_getmethods__["name"] = _ester_wrap.atm_struct_name_get
    if _newclass:
        name = _swig_property(_ester_wrap.atm_struct_name_get, _ester_wrap.atm_struct_name_set)

    def __init__(self):
        this = _ester_wrap.new_atm_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_atm_struct
    __del__ = lambda self: None
atm_struct_swigregister = _ester_wrap.atm_struct_swigregister
atm_struct_swigregister(atm_struct)

class composition_map(matrix_map):
    __swig_setmethods__ = {}
    for _s in [matrix_map]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, composition_map, name, value)
    __swig_getmethods__ = {}
    for _s in [matrix_map]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, composition_map, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dt"] = _ester_wrap.composition_map_dt_set
    __swig_getmethods__["dt"] = _ester_wrap.composition_map_dt_get
    if _newclass:
        dt = _swig_property(_ester_wrap.composition_map_dt_get, _ester_wrap.composition_map_dt_set)
    __swig_setmethods__["jac"] = _ester_wrap.composition_map_jac_set
    __swig_getmethods__["jac"] = _ester_wrap.composition_map_jac_get
    if _newclass:
        jac = _swig_property(_ester_wrap.composition_map_jac_get, _ester_wrap.composition_map_jac_set)

    def __init__(self, *args):
        this = _ester_wrap.new_composition_map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def X(self):
        return _ester_wrap.composition_map_X(self)

    def Y(self):
        return _ester_wrap.composition_map_Y(self)

    def Z(self):
        return _ester_wrap.composition_map_Z(self)
    __swig_destroy__ = _ester_wrap.delete_composition_map
    __del__ = lambda self: None
composition_map_swigregister = _ester_wrap.composition_map_swigregister
composition_map_swigregister(composition_map)


def opa_calc(X, Z, T, rho, opa):
    return _ester_wrap.opa_calc(X, Z, T, rho, opa)
opa_calc = _ester_wrap.opa_calc

def eos_calc(X, Z, T, p, rho, eos):
    return _ester_wrap.eos_calc(X, Z, T, p, rho, eos)
eos_calc = _ester_wrap.eos_calc

def nuc_calc(X, T, rho, nuc):
    return _ester_wrap.nuc_calc(X, T, rho, nuc)
nuc_calc = _ester_wrap.nuc_calc

def atm_calc(X, Z, g, Teff, eos_name, opa_name, atm):
    return _ester_wrap.atm_calc(X, Z, g, Teff, eos_name, opa_name, atm)
atm_calc = _ester_wrap.atm_calc

def opa_opal(X, Z, T, rho, opa):
    return _ester_wrap.opa_opal(X, Z, T, rho, opa)
opa_opal = _ester_wrap.opa_opal

def opa_houdek(X, Z, T, rho, opa):
    return _ester_wrap.opa_houdek(X, Z, T, rho, opa)
opa_houdek = _ester_wrap.opa_houdek

def opa_kramer(T, rho, opa):
    return _ester_wrap.opa_kramer(T, rho, opa)
opa_kramer = _ester_wrap.opa_kramer

def opa_cesam(X, Z, T, rho, opa):
    return _ester_wrap.opa_cesam(X, Z, T, rho, opa)
opa_cesam = _ester_wrap.opa_cesam

def nuc_simple(comp, T, rho, nuc):
    return _ester_wrap.nuc_simple(comp, T, rho, nuc)
nuc_simple = _ester_wrap.nuc_simple

def nuc_cesam(comp, T, rho, nuc):
    return _ester_wrap.nuc_cesam(comp, T, rho, nuc)
nuc_cesam = _ester_wrap.nuc_cesam

def nuc_cesam_dcomp(comp, T, rho, nuc):
    return _ester_wrap.nuc_cesam_dcomp(comp, T, rho, nuc)
nuc_cesam_dcomp = _ester_wrap.nuc_cesam_dcomp

def eos_ideal(X, Z, T, p, rho, eos):
    return _ester_wrap.eos_ideal(X, Z, T, p, rho, eos)
eos_ideal = _ester_wrap.eos_ideal

def eos_idealrad(X, Z, T, p, rho, eos):
    return _ester_wrap.eos_idealrad(X, Z, T, p, rho, eos)
eos_idealrad = _ester_wrap.eos_idealrad

def eos_opal(X, Z, T, p, rho, eos):
    return _ester_wrap.eos_opal(X, Z, T, p, rho, eos)
eos_opal = _ester_wrap.eos_opal

def atm_onelayer(X, Z, g, Teff, eos_name, opa_name, atm):
    return _ester_wrap.atm_onelayer(X, Z, g, Teff, eos_name, opa_name, atm)
atm_onelayer = _ester_wrap.atm_onelayer

MAP_BONAZZOLA = _ester_wrap.MAP_BONAZZOLA
MAP_LINEAR = _ester_wrap.MAP_LINEAR
class mapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gl"] = _ester_wrap.mapping_gl_set
    __swig_getmethods__["gl"] = _ester_wrap.mapping_gl_get
    if _newclass:
        gl = _swig_property(_ester_wrap.mapping_gl_get, _ester_wrap.mapping_gl_set)
    __swig_setmethods__["leg"] = _ester_wrap.mapping_leg_set
    __swig_getmethods__["leg"] = _ester_wrap.mapping_leg_get
    if _newclass:
        leg = _swig_property(_ester_wrap.mapping_leg_get, _ester_wrap.mapping_leg_set)
    __swig_getmethods__["nr"] = _ester_wrap.mapping_nr_get
    if _newclass:
        nr = _swig_property(_ester_wrap.mapping_nr_get)
    __swig_getmethods__["nt"] = _ester_wrap.mapping_nt_get
    if _newclass:
        nt = _swig_property(_ester_wrap.mapping_nt_get)
    __swig_getmethods__["ndomains"] = _ester_wrap.mapping_ndomains_get
    if _newclass:
        ndomains = _swig_property(_ester_wrap.mapping_ndomains_get)
    __swig_setmethods__["mode"] = _ester_wrap.mapping_mode_set
    __swig_getmethods__["mode"] = _ester_wrap.mapping_mode_get
    if _newclass:
        mode = _swig_property(_ester_wrap.mapping_mode_get, _ester_wrap.mapping_mode_set)
    __swig_setmethods__["npts"] = _ester_wrap.mapping_npts_set
    __swig_getmethods__["npts"] = _ester_wrap.mapping_npts_get
    if _newclass:
        npts = _swig_property(_ester_wrap.mapping_npts_get, _ester_wrap.mapping_npts_set)
    __swig_getmethods__["eta"] = _ester_wrap.mapping_eta_get
    if _newclass:
        eta = _swig_property(_ester_wrap.mapping_eta_get)
    __swig_setmethods__["D"] = _ester_wrap.mapping_D_set
    __swig_getmethods__["D"] = _ester_wrap.mapping_D_get
    if _newclass:
        D = _swig_property(_ester_wrap.mapping_D_get, _ester_wrap.mapping_D_set)
    __swig_setmethods__["z"] = _ester_wrap.mapping_z_set
    __swig_getmethods__["z"] = _ester_wrap.mapping_z_get
    if _newclass:
        z = _swig_property(_ester_wrap.mapping_z_get, _ester_wrap.mapping_z_set)
    __swig_setmethods__["th"] = _ester_wrap.mapping_th_set
    __swig_getmethods__["th"] = _ester_wrap.mapping_th_get
    if _newclass:
        th = _swig_property(_ester_wrap.mapping_th_get, _ester_wrap.mapping_th_set)
    __swig_setmethods__["Dt"] = _ester_wrap.mapping_Dt_set
    __swig_getmethods__["Dt"] = _ester_wrap.mapping_Dt_get
    if _newclass:
        Dt = _swig_property(_ester_wrap.mapping_Dt_get, _ester_wrap.mapping_Dt_set)
    __swig_setmethods__["Dt2"] = _ester_wrap.mapping_Dt2_set
    __swig_getmethods__["Dt2"] = _ester_wrap.mapping_Dt2_get
    if _newclass:
        Dt2 = _swig_property(_ester_wrap.mapping_Dt2_get, _ester_wrap.mapping_Dt2_set)
    __swig_setmethods__["Dt_11"] = _ester_wrap.mapping_Dt_11_set
    __swig_getmethods__["Dt_11"] = _ester_wrap.mapping_Dt_11_get
    if _newclass:
        Dt_11 = _swig_property(_ester_wrap.mapping_Dt_11_get, _ester_wrap.mapping_Dt_11_set)
    __swig_setmethods__["Dt2_11"] = _ester_wrap.mapping_Dt2_11_set
    __swig_getmethods__["Dt2_11"] = _ester_wrap.mapping_Dt2_11_get
    if _newclass:
        Dt2_11 = _swig_property(_ester_wrap.mapping_Dt2_11_get, _ester_wrap.mapping_Dt2_11_set)
    __swig_setmethods__["Dt_01"] = _ester_wrap.mapping_Dt_01_set
    __swig_getmethods__["Dt_01"] = _ester_wrap.mapping_Dt_01_get
    if _newclass:
        Dt_01 = _swig_property(_ester_wrap.mapping_Dt_01_get, _ester_wrap.mapping_Dt_01_set)
    __swig_setmethods__["Dt2_01"] = _ester_wrap.mapping_Dt2_01_set
    __swig_getmethods__["Dt2_01"] = _ester_wrap.mapping_Dt2_01_get
    if _newclass:
        Dt2_01 = _swig_property(_ester_wrap.mapping_Dt2_01_get, _ester_wrap.mapping_Dt2_01_set)
    __swig_setmethods__["Dt_10"] = _ester_wrap.mapping_Dt_10_set
    __swig_getmethods__["Dt_10"] = _ester_wrap.mapping_Dt_10_get
    if _newclass:
        Dt_10 = _swig_property(_ester_wrap.mapping_Dt_10_get, _ester_wrap.mapping_Dt_10_set)
    __swig_setmethods__["Dt2_10"] = _ester_wrap.mapping_Dt2_10_set
    __swig_getmethods__["Dt2_10"] = _ester_wrap.mapping_Dt2_10_get
    if _newclass:
        Dt2_10 = _swig_property(_ester_wrap.mapping_Dt2_10_get, _ester_wrap.mapping_Dt2_10_set)
    __swig_setmethods__["I"] = _ester_wrap.mapping_I_set
    __swig_getmethods__["I"] = _ester_wrap.mapping_I_get
    if _newclass:
        I = _swig_property(_ester_wrap.mapping_I_get, _ester_wrap.mapping_I_set)
    __swig_setmethods__["It"] = _ester_wrap.mapping_It_set
    __swig_getmethods__["It"] = _ester_wrap.mapping_It_get
    if _newclass:
        It = _swig_property(_ester_wrap.mapping_It_get, _ester_wrap.mapping_It_set)
    __swig_setmethods__["r"] = _ester_wrap.mapping_r_set
    __swig_getmethods__["r"] = _ester_wrap.mapping_r_get
    if _newclass:
        r = _swig_property(_ester_wrap.mapping_r_get, _ester_wrap.mapping_r_set)
    __swig_setmethods__["rz"] = _ester_wrap.mapping_rz_set
    __swig_getmethods__["rz"] = _ester_wrap.mapping_rz_get
    if _newclass:
        rz = _swig_property(_ester_wrap.mapping_rz_get, _ester_wrap.mapping_rz_set)
    __swig_setmethods__["rzz"] = _ester_wrap.mapping_rzz_set
    __swig_getmethods__["rzz"] = _ester_wrap.mapping_rzz_get
    if _newclass:
        rzz = _swig_property(_ester_wrap.mapping_rzz_get, _ester_wrap.mapping_rzz_set)
    __swig_setmethods__["rt"] = _ester_wrap.mapping_rt_set
    __swig_getmethods__["rt"] = _ester_wrap.mapping_rt_get
    if _newclass:
        rt = _swig_property(_ester_wrap.mapping_rt_get, _ester_wrap.mapping_rt_set)
    __swig_setmethods__["rtt"] = _ester_wrap.mapping_rtt_set
    __swig_getmethods__["rtt"] = _ester_wrap.mapping_rtt_get
    if _newclass:
        rtt = _swig_property(_ester_wrap.mapping_rtt_get, _ester_wrap.mapping_rtt_set)
    __swig_setmethods__["rzt"] = _ester_wrap.mapping_rzt_set
    __swig_getmethods__["rzt"] = _ester_wrap.mapping_rzt_get
    if _newclass:
        rzt = _swig_property(_ester_wrap.mapping_rzt_get, _ester_wrap.mapping_rzt_set)
    __swig_setmethods__["gzz"] = _ester_wrap.mapping_gzz_set
    __swig_getmethods__["gzz"] = _ester_wrap.mapping_gzz_get
    if _newclass:
        gzz = _swig_property(_ester_wrap.mapping_gzz_get, _ester_wrap.mapping_gzz_set)
    __swig_setmethods__["gzt"] = _ester_wrap.mapping_gzt_set
    __swig_getmethods__["gzt"] = _ester_wrap.mapping_gzt_get
    if _newclass:
        gzt = _swig_property(_ester_wrap.mapping_gzt_get, _ester_wrap.mapping_gzt_set)
    __swig_setmethods__["gtt"] = _ester_wrap.mapping_gtt_set
    __swig_getmethods__["gtt"] = _ester_wrap.mapping_gtt_get
    if _newclass:
        gtt = _swig_property(_ester_wrap.mapping_gtt_get, _ester_wrap.mapping_gtt_set)
    __swig_setmethods__["R"] = _ester_wrap.mapping_R_set
    __swig_getmethods__["R"] = _ester_wrap.mapping_R_get
    if _newclass:
        R = _swig_property(_ester_wrap.mapping_R_get, _ester_wrap.mapping_R_set)
    __swig_setmethods__["J"] = _ester_wrap.mapping_J_set
    __swig_getmethods__["J"] = _ester_wrap.mapping_J_get
    if _newclass:
        J = _swig_property(_ester_wrap.mapping_J_get, _ester_wrap.mapping_J_set)
    __swig_setmethods__["ex"] = _ester_wrap.mapping_ex_set
    __swig_getmethods__["ex"] = _ester_wrap.mapping_ex_get
    if _newclass:
        ex = _swig_property(_ester_wrap.mapping_ex_get, _ester_wrap.mapping_ex_set)
    __swig_getmethods__["nex"] = _ester_wrap.mapping_nex_get
    if _newclass:
        nex = _swig_property(_ester_wrap.mapping_nex_get)
    __swig_destroy__ = _ester_wrap.delete_mapping
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_mapping(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, arg2):
        return _ester_wrap.mapping_copy(self, arg2)

    def set_ndomains(self, ndom):
        return _ester_wrap.mapping_set_ndomains(self, ndom)

    def set_nt(self, nt):
        return _ester_wrap.mapping_set_nt(self, nt)

    def set_nex(self, nex):
        return _ester_wrap.mapping_set_nex(self, nex)

    def set_npts(self, *args):
        return _ester_wrap.mapping_set_npts(self, *args)

    def set_mode(self, mode):
        return _ester_wrap.mapping_set_mode(self, mode)

    def init(self):
        return _ester_wrap.mapping_init(self)

    def remap(self):
        return _ester_wrap.mapping_remap(self)

    def eval(self, y, ri, thi, parity=0):
        return _ester_wrap.mapping_eval(self, y, ri, thi, parity)

    def dr(self, arg2):
        return _ester_wrap.mapping_dr(self, arg2)

    def dt(self, arg2):
        return _ester_wrap.mapping_dt(self, arg2)

    def dt_odd(self, arg2):
        return _ester_wrap.mapping_dt_odd(self, arg2)

    def dt2(self, arg2):
        return _ester_wrap.mapping_dt2(self, arg2)

    def stream(self, *args):
        return _ester_wrap.mapping_stream(self, *args)

    def zeta_to_r(self, z):
        return _ester_wrap.mapping_zeta_to_r(self, z)

    def draw0(self, A, parity, x, y):
        return _ester_wrap.mapping_draw0(self, A, parity, x, y)
mapping_swigregister = _ester_wrap.mapping_swigregister
mapping_swigregister(mapping)

class remapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, remapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, remapper, name)
    __repr__ = _swig_repr

    def __init__(self, map):
        this = _ester_wrap.new_remapper(map)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_remapper
    __del__ = lambda self: None

    def set_nt(self, nt):
        return _ester_wrap.remapper_set_nt(self, nt)

    def set_nex(self, nex):
        return _ester_wrap.remapper_set_nex(self, nex)

    def set_ndomains(self, ndom):
        return _ester_wrap.remapper_set_ndomains(self, ndom)

    def set_npts(self, *args):
        return _ester_wrap.remapper_set_npts(self, *args)

    def set_R(self, R):
        return _ester_wrap.remapper_set_R(self, R)

    def set_fixed(self, idom_new, idom_old):
        return _ester_wrap.remapper_set_fixed(self, idom_new, idom_old)

    def set_mode(self, mode):
        return _ester_wrap.remapper_set_mode(self, mode)

    def get_map(self):
        return _ester_wrap.remapper_get_map(self)

    def interp(self, *args):
        return _ester_wrap.remapper_interp(self, *args)

    def interp_ex(self, y, parity=0):
        return _ester_wrap.remapper_interp_ex(self, y, parity)
remapper_swigregister = _ester_wrap.remapper_swigregister
remapper_swigregister(remapper)

class diff_gl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diff_gl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diff_gl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _ester_wrap.diff_gl_x_set
    __swig_getmethods__["x"] = _ester_wrap.diff_gl_x_get
    if _newclass:
        x = _swig_property(_ester_wrap.diff_gl_x_get, _ester_wrap.diff_gl_x_set)
    __swig_setmethods__["I"] = _ester_wrap.diff_gl_I_set
    __swig_getmethods__["I"] = _ester_wrap.diff_gl_I_get
    if _newclass:
        I = _swig_property(_ester_wrap.diff_gl_I_get, _ester_wrap.diff_gl_I_set)
    __swig_setmethods__["P"] = _ester_wrap.diff_gl_P_set
    __swig_getmethods__["P"] = _ester_wrap.diff_gl_P_get
    if _newclass:
        P = _swig_property(_ester_wrap.diff_gl_P_get, _ester_wrap.diff_gl_P_set)
    __swig_setmethods__["P1"] = _ester_wrap.diff_gl_P1_set
    __swig_getmethods__["P1"] = _ester_wrap.diff_gl_P1_get
    if _newclass:
        P1 = _swig_property(_ester_wrap.diff_gl_P1_get, _ester_wrap.diff_gl_P1_set)
    __swig_setmethods__["D"] = _ester_wrap.diff_gl_D_set
    __swig_getmethods__["D"] = _ester_wrap.diff_gl_D_get
    if _newclass:
        D = _swig_property(_ester_wrap.diff_gl_D_get, _ester_wrap.diff_gl_D_set)
    __swig_setmethods__["npts"] = _ester_wrap.diff_gl_npts_set
    __swig_getmethods__["npts"] = _ester_wrap.diff_gl_npts_get
    if _newclass:
        npts = _swig_property(_ester_wrap.diff_gl_npts_get, _ester_wrap.diff_gl_npts_set)
    __swig_setmethods__["xif"] = _ester_wrap.diff_gl_xif_set
    __swig_getmethods__["xif"] = _ester_wrap.diff_gl_xif_get
    if _newclass:
        xif = _swig_property(_ester_wrap.diff_gl_xif_get, _ester_wrap.diff_gl_xif_set)
    __swig_getmethods__["ndomains"] = _ester_wrap.diff_gl_ndomains_get
    if _newclass:
        ndomains = _swig_property(_ester_wrap.diff_gl_ndomains_get)
    __swig_getmethods__["N"] = _ester_wrap.diff_gl_N_get
    if _newclass:
        N = _swig_property(_ester_wrap.diff_gl_N_get)
    __swig_destroy__ = _ester_wrap.delete_diff_gl
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_diff_gl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_ndomains(self, n):
        return _ester_wrap.diff_gl_set_ndomains(self, n)

    def set_xif(self, arg2):
        return _ester_wrap.diff_gl_set_xif(self, arg2)

    def set_npts(self, arg2):
        return _ester_wrap.diff_gl_set_npts(self, arg2)

    def init(self):
        return _ester_wrap.diff_gl_init(self)

    def eval(self, *args):
        return _ester_wrap.diff_gl_eval(self, *args)
diff_gl_swigregister = _ester_wrap.diff_gl_swigregister
diff_gl_swigregister(diff_gl)

class diff_leg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diff_leg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diff_leg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["npts"] = _ester_wrap.diff_leg_npts_set
    __swig_getmethods__["npts"] = _ester_wrap.diff_leg_npts_get
    if _newclass:
        npts = _swig_property(_ester_wrap.diff_leg_npts_get, _ester_wrap.diff_leg_npts_set)
    __swig_setmethods__["th"] = _ester_wrap.diff_leg_th_set
    __swig_getmethods__["th"] = _ester_wrap.diff_leg_th_get
    if _newclass:
        th = _swig_property(_ester_wrap.diff_leg_th_get, _ester_wrap.diff_leg_th_set)
    __swig_setmethods__["P_00"] = _ester_wrap.diff_leg_P_00_set
    __swig_getmethods__["P_00"] = _ester_wrap.diff_leg_P_00_get
    if _newclass:
        P_00 = _swig_property(_ester_wrap.diff_leg_P_00_get, _ester_wrap.diff_leg_P_00_set)
    __swig_setmethods__["P_01"] = _ester_wrap.diff_leg_P_01_set
    __swig_getmethods__["P_01"] = _ester_wrap.diff_leg_P_01_get
    if _newclass:
        P_01 = _swig_property(_ester_wrap.diff_leg_P_01_get, _ester_wrap.diff_leg_P_01_set)
    __swig_setmethods__["P_10"] = _ester_wrap.diff_leg_P_10_set
    __swig_getmethods__["P_10"] = _ester_wrap.diff_leg_P_10_get
    if _newclass:
        P_10 = _swig_property(_ester_wrap.diff_leg_P_10_get, _ester_wrap.diff_leg_P_10_set)
    __swig_setmethods__["P_11"] = _ester_wrap.diff_leg_P_11_set
    __swig_getmethods__["P_11"] = _ester_wrap.diff_leg_P_11_get
    if _newclass:
        P_11 = _swig_property(_ester_wrap.diff_leg_P_11_get, _ester_wrap.diff_leg_P_11_set)
    __swig_setmethods__["P1_00"] = _ester_wrap.diff_leg_P1_00_set
    __swig_getmethods__["P1_00"] = _ester_wrap.diff_leg_P1_00_get
    if _newclass:
        P1_00 = _swig_property(_ester_wrap.diff_leg_P1_00_get, _ester_wrap.diff_leg_P1_00_set)
    __swig_setmethods__["P1_01"] = _ester_wrap.diff_leg_P1_01_set
    __swig_getmethods__["P1_01"] = _ester_wrap.diff_leg_P1_01_get
    if _newclass:
        P1_01 = _swig_property(_ester_wrap.diff_leg_P1_01_get, _ester_wrap.diff_leg_P1_01_set)
    __swig_setmethods__["P1_10"] = _ester_wrap.diff_leg_P1_10_set
    __swig_getmethods__["P1_10"] = _ester_wrap.diff_leg_P1_10_get
    if _newclass:
        P1_10 = _swig_property(_ester_wrap.diff_leg_P1_10_get, _ester_wrap.diff_leg_P1_10_set)
    __swig_setmethods__["P1_11"] = _ester_wrap.diff_leg_P1_11_set
    __swig_getmethods__["P1_11"] = _ester_wrap.diff_leg_P1_11_get
    if _newclass:
        P1_11 = _swig_property(_ester_wrap.diff_leg_P1_11_get, _ester_wrap.diff_leg_P1_11_set)
    __swig_setmethods__["dP1_00"] = _ester_wrap.diff_leg_dP1_00_set
    __swig_getmethods__["dP1_00"] = _ester_wrap.diff_leg_dP1_00_get
    if _newclass:
        dP1_00 = _swig_property(_ester_wrap.diff_leg_dP1_00_get, _ester_wrap.diff_leg_dP1_00_set)
    __swig_setmethods__["dP1_01"] = _ester_wrap.diff_leg_dP1_01_set
    __swig_getmethods__["dP1_01"] = _ester_wrap.diff_leg_dP1_01_get
    if _newclass:
        dP1_01 = _swig_property(_ester_wrap.diff_leg_dP1_01_get, _ester_wrap.diff_leg_dP1_01_set)
    __swig_setmethods__["dP1_10"] = _ester_wrap.diff_leg_dP1_10_set
    __swig_getmethods__["dP1_10"] = _ester_wrap.diff_leg_dP1_10_get
    if _newclass:
        dP1_10 = _swig_property(_ester_wrap.diff_leg_dP1_10_get, _ester_wrap.diff_leg_dP1_10_set)
    __swig_setmethods__["dP1_11"] = _ester_wrap.diff_leg_dP1_11_set
    __swig_getmethods__["dP1_11"] = _ester_wrap.diff_leg_dP1_11_get
    if _newclass:
        dP1_11 = _swig_property(_ester_wrap.diff_leg_dP1_11_get, _ester_wrap.diff_leg_dP1_11_set)
    __swig_setmethods__["D_00"] = _ester_wrap.diff_leg_D_00_set
    __swig_getmethods__["D_00"] = _ester_wrap.diff_leg_D_00_get
    if _newclass:
        D_00 = _swig_property(_ester_wrap.diff_leg_D_00_get, _ester_wrap.diff_leg_D_00_set)
    __swig_setmethods__["D_01"] = _ester_wrap.diff_leg_D_01_set
    __swig_getmethods__["D_01"] = _ester_wrap.diff_leg_D_01_get
    if _newclass:
        D_01 = _swig_property(_ester_wrap.diff_leg_D_01_get, _ester_wrap.diff_leg_D_01_set)
    __swig_setmethods__["D_10"] = _ester_wrap.diff_leg_D_10_set
    __swig_getmethods__["D_10"] = _ester_wrap.diff_leg_D_10_get
    if _newclass:
        D_10 = _swig_property(_ester_wrap.diff_leg_D_10_get, _ester_wrap.diff_leg_D_10_set)
    __swig_setmethods__["D_11"] = _ester_wrap.diff_leg_D_11_set
    __swig_getmethods__["D_11"] = _ester_wrap.diff_leg_D_11_get
    if _newclass:
        D_11 = _swig_property(_ester_wrap.diff_leg_D_11_get, _ester_wrap.diff_leg_D_11_set)
    __swig_setmethods__["D2_00"] = _ester_wrap.diff_leg_D2_00_set
    __swig_getmethods__["D2_00"] = _ester_wrap.diff_leg_D2_00_get
    if _newclass:
        D2_00 = _swig_property(_ester_wrap.diff_leg_D2_00_get, _ester_wrap.diff_leg_D2_00_set)
    __swig_setmethods__["D2_01"] = _ester_wrap.diff_leg_D2_01_set
    __swig_getmethods__["D2_01"] = _ester_wrap.diff_leg_D2_01_get
    if _newclass:
        D2_01 = _swig_property(_ester_wrap.diff_leg_D2_01_get, _ester_wrap.diff_leg_D2_01_set)
    __swig_setmethods__["D2_10"] = _ester_wrap.diff_leg_D2_10_set
    __swig_getmethods__["D2_10"] = _ester_wrap.diff_leg_D2_10_get
    if _newclass:
        D2_10 = _swig_property(_ester_wrap.diff_leg_D2_10_get, _ester_wrap.diff_leg_D2_10_set)
    __swig_setmethods__["D2_11"] = _ester_wrap.diff_leg_D2_11_set
    __swig_getmethods__["D2_11"] = _ester_wrap.diff_leg_D2_11_get
    if _newclass:
        D2_11 = _swig_property(_ester_wrap.diff_leg_D2_11_get, _ester_wrap.diff_leg_D2_11_set)
    __swig_setmethods__["I_00"] = _ester_wrap.diff_leg_I_00_set
    __swig_getmethods__["I_00"] = _ester_wrap.diff_leg_I_00_get
    if _newclass:
        I_00 = _swig_property(_ester_wrap.diff_leg_I_00_get, _ester_wrap.diff_leg_I_00_set)
    __swig_setmethods__["lap_00"] = _ester_wrap.diff_leg_lap_00_set
    __swig_getmethods__["lap_00"] = _ester_wrap.diff_leg_lap_00_get
    if _newclass:
        lap_00 = _swig_property(_ester_wrap.diff_leg_lap_00_get, _ester_wrap.diff_leg_lap_00_set)
    __swig_setmethods__["lap_01"] = _ester_wrap.diff_leg_lap_01_set
    __swig_getmethods__["lap_01"] = _ester_wrap.diff_leg_lap_01_get
    if _newclass:
        lap_01 = _swig_property(_ester_wrap.diff_leg_lap_01_get, _ester_wrap.diff_leg_lap_01_set)
    __swig_setmethods__["lap_10"] = _ester_wrap.diff_leg_lap_10_set
    __swig_getmethods__["lap_10"] = _ester_wrap.diff_leg_lap_10_get
    if _newclass:
        lap_10 = _swig_property(_ester_wrap.diff_leg_lap_10_get, _ester_wrap.diff_leg_lap_10_set)
    __swig_setmethods__["lap_11"] = _ester_wrap.diff_leg_lap_11_set
    __swig_getmethods__["lap_11"] = _ester_wrap.diff_leg_lap_11_get
    if _newclass:
        lap_11 = _swig_property(_ester_wrap.diff_leg_lap_11_get, _ester_wrap.diff_leg_lap_11_set)
    __swig_destroy__ = _ester_wrap.delete_diff_leg
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_diff_leg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self):
        return _ester_wrap.diff_leg_init(self)

    def eval_00(self, *args):
        return _ester_wrap.diff_leg_eval_00(self, *args)

    def eval_01(self, *args):
        return _ester_wrap.diff_leg_eval_01(self, *args)

    def eval_10(self, *args):
        return _ester_wrap.diff_leg_eval_10(self, *args)

    def eval_11(self, *args):
        return _ester_wrap.diff_leg_eval_11(self, *args)

    def eval(self, *args):
        return _ester_wrap.diff_leg_eval(self, *args)

    def l_00(self):
        return _ester_wrap.diff_leg_l_00(self)

    def l_01(self):
        return _ester_wrap.diff_leg_l_01(self)

    def l_10(self):
        return _ester_wrap.diff_leg_l_10(self)

    def l_11(self):
        return _ester_wrap.diff_leg_l_11(self)
diff_leg_swigregister = _ester_wrap.diff_leg_swigregister
diff_leg_swigregister(diff_leg)

LOG_PRES = _ester_wrap.LOG_PRES
class star2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, star2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, star2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map"] = _ester_wrap.star2d_map_set
    __swig_getmethods__["map"] = _ester_wrap.star2d_map_get
    if _newclass:
        map = _swig_property(_ester_wrap.star2d_map_get, _ester_wrap.star2d_map_set)
    __swig_getmethods__["nr"] = _ester_wrap.star2d_nr_get
    if _newclass:
        nr = _swig_property(_ester_wrap.star2d_nr_get)
    __swig_getmethods__["nth"] = _ester_wrap.star2d_nth_get
    if _newclass:
        nth = _swig_property(_ester_wrap.star2d_nth_get)
    __swig_getmethods__["nex"] = _ester_wrap.star2d_nex_get
    if _newclass:
        nex = _swig_property(_ester_wrap.star2d_nex_get)
    __swig_getmethods__["ndomains"] = _ester_wrap.star2d_ndomains_get
    if _newclass:
        ndomains = _swig_property(_ester_wrap.star2d_ndomains_get)
    __swig_getmethods__["r"] = _ester_wrap.star2d_r_get
    if _newclass:
        r = _swig_property(_ester_wrap.star2d_r_get)
    __swig_getmethods__["z"] = _ester_wrap.star2d_z_get
    if _newclass:
        z = _swig_property(_ester_wrap.star2d_z_get)
    __swig_getmethods__["th"] = _ester_wrap.star2d_th_get
    if _newclass:
        th = _swig_property(_ester_wrap.star2d_th_get)
    __swig_getmethods__["Dt"] = _ester_wrap.star2d_Dt_get
    if _newclass:
        Dt = _swig_property(_ester_wrap.star2d_Dt_get)
    __swig_getmethods__["Dt2"] = _ester_wrap.star2d_Dt2_get
    if _newclass:
        Dt2 = _swig_property(_ester_wrap.star2d_Dt2_get)
    __swig_getmethods__["zex"] = _ester_wrap.star2d_zex_get
    if _newclass:
        zex = _swig_property(_ester_wrap.star2d_zex_get)
    __swig_getmethods__["Dex"] = _ester_wrap.star2d_Dex_get
    if _newclass:
        Dex = _swig_property(_ester_wrap.star2d_Dex_get)
    __swig_getmethods__["rex"] = _ester_wrap.star2d_rex_get
    if _newclass:
        rex = _swig_property(_ester_wrap.star2d_rex_get)
    __swig_getmethods__["D"] = _ester_wrap.star2d_D_get
    if _newclass:
        D = _swig_property(_ester_wrap.star2d_D_get)
    __swig_setmethods__["rho"] = _ester_wrap.star2d_rho_set
    __swig_getmethods__["rho"] = _ester_wrap.star2d_rho_get
    if _newclass:
        rho = _swig_property(_ester_wrap.star2d_rho_get, _ester_wrap.star2d_rho_set)
    __swig_setmethods__["phi"] = _ester_wrap.star2d_phi_set
    __swig_getmethods__["phi"] = _ester_wrap.star2d_phi_get
    if _newclass:
        phi = _swig_property(_ester_wrap.star2d_phi_get, _ester_wrap.star2d_phi_set)
    __swig_setmethods__["p"] = _ester_wrap.star2d_p_set
    __swig_getmethods__["p"] = _ester_wrap.star2d_p_get
    if _newclass:
        p = _swig_property(_ester_wrap.star2d_p_get, _ester_wrap.star2d_p_set)
    __swig_setmethods__["T"] = _ester_wrap.star2d_T_set
    __swig_getmethods__["T"] = _ester_wrap.star2d_T_get
    if _newclass:
        T = _swig_property(_ester_wrap.star2d_T_get, _ester_wrap.star2d_T_set)
    __swig_setmethods__["phiex"] = _ester_wrap.star2d_phiex_set
    __swig_getmethods__["phiex"] = _ester_wrap.star2d_phiex_get
    if _newclass:
        phiex = _swig_property(_ester_wrap.star2d_phiex_get, _ester_wrap.star2d_phiex_set)
    __swig_setmethods__["vr"] = _ester_wrap.star2d_vr_set
    __swig_getmethods__["vr"] = _ester_wrap.star2d_vr_get
    if _newclass:
        vr = _swig_property(_ester_wrap.star2d_vr_get, _ester_wrap.star2d_vr_set)
    __swig_setmethods__["vt"] = _ester_wrap.star2d_vt_set
    __swig_getmethods__["vt"] = _ester_wrap.star2d_vt_get
    if _newclass:
        vt = _swig_property(_ester_wrap.star2d_vt_get, _ester_wrap.star2d_vt_set)
    __swig_setmethods__["G"] = _ester_wrap.star2d_G_set
    __swig_getmethods__["G"] = _ester_wrap.star2d_G_get
    if _newclass:
        G = _swig_property(_ester_wrap.star2d_G_get, _ester_wrap.star2d_G_set)
    __swig_setmethods__["w"] = _ester_wrap.star2d_w_set
    __swig_getmethods__["w"] = _ester_wrap.star2d_w_get
    if _newclass:
        w = _swig_property(_ester_wrap.star2d_w_get, _ester_wrap.star2d_w_set)
    __swig_setmethods__["comp"] = _ester_wrap.star2d_comp_set
    __swig_getmethods__["comp"] = _ester_wrap.star2d_comp_get
    if _newclass:
        comp = _swig_property(_ester_wrap.star2d_comp_get, _ester_wrap.star2d_comp_set)
    __swig_setmethods__["X0"] = _ester_wrap.star2d_X0_set
    __swig_getmethods__["X0"] = _ester_wrap.star2d_X0_get
    if _newclass:
        X0 = _swig_property(_ester_wrap.star2d_X0_get, _ester_wrap.star2d_X0_set)
    __swig_setmethods__["Y0"] = _ester_wrap.star2d_Y0_set
    __swig_getmethods__["Y0"] = _ester_wrap.star2d_Y0_get
    if _newclass:
        Y0 = _swig_property(_ester_wrap.star2d_Y0_get, _ester_wrap.star2d_Y0_set)
    __swig_setmethods__["Z0"] = _ester_wrap.star2d_Z0_set
    __swig_getmethods__["Z0"] = _ester_wrap.star2d_Z0_get
    if _newclass:
        Z0 = _swig_property(_ester_wrap.star2d_Z0_get, _ester_wrap.star2d_Z0_set)
    __swig_setmethods__["R"] = _ester_wrap.star2d_R_set
    __swig_getmethods__["R"] = _ester_wrap.star2d_R_get
    if _newclass:
        R = _swig_property(_ester_wrap.star2d_R_get, _ester_wrap.star2d_R_set)
    __swig_setmethods__["M"] = _ester_wrap.star2d_M_set
    __swig_getmethods__["M"] = _ester_wrap.star2d_M_get
    if _newclass:
        M = _swig_property(_ester_wrap.star2d_M_get, _ester_wrap.star2d_M_set)
    __swig_setmethods__["rhoc"] = _ester_wrap.star2d_rhoc_set
    __swig_getmethods__["rhoc"] = _ester_wrap.star2d_rhoc_get
    if _newclass:
        rhoc = _swig_property(_ester_wrap.star2d_rhoc_get, _ester_wrap.star2d_rhoc_set)
    __swig_setmethods__["Tc"] = _ester_wrap.star2d_Tc_set
    __swig_getmethods__["Tc"] = _ester_wrap.star2d_Tc_get
    if _newclass:
        Tc = _swig_property(_ester_wrap.star2d_Tc_get, _ester_wrap.star2d_Tc_set)
    __swig_setmethods__["pc"] = _ester_wrap.star2d_pc_set
    __swig_getmethods__["pc"] = _ester_wrap.star2d_pc_get
    if _newclass:
        pc = _swig_property(_ester_wrap.star2d_pc_get, _ester_wrap.star2d_pc_set)
    __swig_setmethods__["Omega"] = _ester_wrap.star2d_Omega_set
    __swig_getmethods__["Omega"] = _ester_wrap.star2d_Omega_get
    if _newclass:
        Omega = _swig_property(_ester_wrap.star2d_Omega_get, _ester_wrap.star2d_Omega_set)
    __swig_setmethods__["Omega_bk"] = _ester_wrap.star2d_Omega_bk_set
    __swig_getmethods__["Omega_bk"] = _ester_wrap.star2d_Omega_bk_get
    if _newclass:
        Omega_bk = _swig_property(_ester_wrap.star2d_Omega_bk_get, _ester_wrap.star2d_Omega_bk_set)
    __swig_setmethods__["Omegac"] = _ester_wrap.star2d_Omegac_set
    __swig_getmethods__["Omegac"] = _ester_wrap.star2d_Omegac_get
    if _newclass:
        Omegac = _swig_property(_ester_wrap.star2d_Omegac_get, _ester_wrap.star2d_Omegac_set)
    __swig_setmethods__["Ekman"] = _ester_wrap.star2d_Ekman_set
    __swig_getmethods__["Ekman"] = _ester_wrap.star2d_Ekman_get
    if _newclass:
        Ekman = _swig_property(_ester_wrap.star2d_Ekman_get, _ester_wrap.star2d_Ekman_set)
    __swig_setmethods__["opa"] = _ester_wrap.star2d_opa_set
    __swig_getmethods__["opa"] = _ester_wrap.star2d_opa_get
    if _newclass:
        opa = _swig_property(_ester_wrap.star2d_opa_get, _ester_wrap.star2d_opa_set)
    __swig_setmethods__["nuc"] = _ester_wrap.star2d_nuc_set
    __swig_getmethods__["nuc"] = _ester_wrap.star2d_nuc_get
    if _newclass:
        nuc = _swig_property(_ester_wrap.star2d_nuc_get, _ester_wrap.star2d_nuc_set)
    __swig_setmethods__["eos"] = _ester_wrap.star2d_eos_set
    __swig_getmethods__["eos"] = _ester_wrap.star2d_eos_get
    if _newclass:
        eos = _swig_property(_ester_wrap.star2d_eos_get, _ester_wrap.star2d_eos_set)
    __swig_setmethods__["atm"] = _ester_wrap.star2d_atm_set
    __swig_getmethods__["atm"] = _ester_wrap.star2d_atm_get
    if _newclass:
        atm = _swig_property(_ester_wrap.star2d_atm_get, _ester_wrap.star2d_atm_set)
    __swig_setmethods__["ps"] = _ester_wrap.star2d_ps_set
    __swig_getmethods__["ps"] = _ester_wrap.star2d_ps_get
    if _newclass:
        ps = _swig_property(_ester_wrap.star2d_ps_get, _ester_wrap.star2d_ps_set)
    __swig_setmethods__["Ts"] = _ester_wrap.star2d_Ts_set
    __swig_getmethods__["Ts"] = _ester_wrap.star2d_Ts_get
    if _newclass:
        Ts = _swig_property(_ester_wrap.star2d_Ts_get, _ester_wrap.star2d_Ts_set)
    __swig_setmethods__["m"] = _ester_wrap.star2d_m_set
    __swig_getmethods__["m"] = _ester_wrap.star2d_m_get
    if _newclass:
        m = _swig_property(_ester_wrap.star2d_m_get, _ester_wrap.star2d_m_set)
    __swig_setmethods__["pi_c"] = _ester_wrap.star2d_pi_c_set
    __swig_getmethods__["pi_c"] = _ester_wrap.star2d_pi_c_get
    if _newclass:
        pi_c = _swig_property(_ester_wrap.star2d_pi_c_get, _ester_wrap.star2d_pi_c_set)
    __swig_setmethods__["Lambda"] = _ester_wrap.star2d_Lambda_set
    __swig_getmethods__["Lambda"] = _ester_wrap.star2d_Lambda_get
    if _newclass:
        Lambda = _swig_property(_ester_wrap.star2d_Lambda_get, _ester_wrap.star2d_Lambda_set)
    __swig_setmethods__["surff"] = _ester_wrap.star2d_surff_set
    __swig_getmethods__["surff"] = _ester_wrap.star2d_surff_get
    if _newclass:
        surff = _swig_property(_ester_wrap.star2d_surff_get, _ester_wrap.star2d_surff_set)
    __swig_setmethods__["conv"] = _ester_wrap.star2d_conv_set
    __swig_getmethods__["conv"] = _ester_wrap.star2d_conv_get
    if _newclass:
        conv = _swig_property(_ester_wrap.star2d_conv_get, _ester_wrap.star2d_conv_set)
    __swig_setmethods__["Xc"] = _ester_wrap.star2d_Xc_set
    __swig_getmethods__["Xc"] = _ester_wrap.star2d_Xc_get
    if _newclass:
        Xc = _swig_property(_ester_wrap.star2d_Xc_get, _ester_wrap.star2d_Xc_set)
    __swig_setmethods__["core_convec"] = _ester_wrap.star2d_core_convec_set
    __swig_getmethods__["core_convec"] = _ester_wrap.star2d_core_convec_get
    if _newclass:
        core_convec = _swig_property(_ester_wrap.star2d_core_convec_get, _ester_wrap.star2d_core_convec_set)
    __swig_setmethods__["env_convec"] = _ester_wrap.star2d_env_convec_set
    __swig_getmethods__["env_convec"] = _ester_wrap.star2d_env_convec_get
    if _newclass:
        env_convec = _swig_property(_ester_wrap.star2d_env_convec_get, _ester_wrap.star2d_env_convec_set)
    __swig_setmethods__["stratified_comp"] = _ester_wrap.star2d_stratified_comp_set
    __swig_getmethods__["stratified_comp"] = _ester_wrap.star2d_stratified_comp_get
    if _newclass:
        stratified_comp = _swig_property(_ester_wrap.star2d_stratified_comp_get, _ester_wrap.star2d_stratified_comp_set)
    __swig_setmethods__["min_core_size"] = _ester_wrap.star2d_min_core_size_set
    __swig_getmethods__["min_core_size"] = _ester_wrap.star2d_min_core_size_get
    if _newclass:
        min_core_size = _swig_property(_ester_wrap.star2d_min_core_size_get, _ester_wrap.star2d_min_core_size_set)
    __swig_setmethods__["domain_type"] = _ester_wrap.star2d_domain_type_set
    __swig_getmethods__["domain_type"] = _ester_wrap.star2d_domain_type_get
    if _newclass:
        domain_type = _swig_property(_ester_wrap.star2d_domain_type_get, _ester_wrap.star2d_domain_type_set)
    __swig_setmethods__["version"] = _ester_wrap.star2d_version_set
    __swig_getmethods__["version"] = _ester_wrap.star2d_version_get
    if _newclass:
        version = _swig_property(_ester_wrap.star2d_version_get, _ester_wrap.star2d_version_set)
    __swig_setmethods__["units"] = _ester_wrap.star2d_units_set
    __swig_getmethods__["units"] = _ester_wrap.star2d_units_get
    if _newclass:
        units = _swig_property(_ester_wrap.star2d_units_get, _ester_wrap.star2d_units_set)

    def calc_units(self):
        return _ester_wrap.star2d_calc_units(self)
    __swig_destroy__ = _ester_wrap.delete_star2d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_star2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["config"] = _ester_wrap.star2d_config_set
    __swig_getmethods__["config"] = _ester_wrap.star2d_config_get
    if _newclass:
        config = _swig_property(_ester_wrap.star2d_config_get, _ester_wrap.star2d_config_set)

    def opacity(self):
        return _ester_wrap.star2d_opacity(self)

    def nuclear(self):
        return _ester_wrap.star2d_nuclear(self)

    def eq_state(self):
        return _ester_wrap.star2d_eq_state(self)

    def atmosphere(self):
        return _ester_wrap.star2d_atmosphere(self)

    def init(self, input_file, param_file, argc, argv):
        return _ester_wrap.star2d_init(self, input_file, param_file, argc, argv)

    def check_arg(self, arg, val, change_grid):
        return _ester_wrap.star2d_check_arg(self, arg, val, change_grid)

    def read(self, input_file, dim=2):
        return _ester_wrap.star2d_read(self, input_file, dim)

    def read_old(self, input_file):
        return _ester_wrap.star2d_read_old(self, input_file)

    def write(self, *args):
        return _ester_wrap.star2d_write(self, *args)

    def interp(self, red):
        return _ester_wrap.star2d_interp(self, red)

    def dump_info(self):
        return _ester_wrap.star2d_dump_info(self)

    def init_comp(self):
        return _ester_wrap.star2d_init_comp(self)

    def init_solver(self, nvar_add=0):
        return _ester_wrap.star2d_init_solver(self, nvar_add)

    def solve(self, *args):
        return _ester_wrap.star2d_solve(self, *args)

    def register_variables(self, op):
        return _ester_wrap.star2d_register_variables(self, op)

    def solve_poisson(self, arg2):
        return _ester_wrap.star2d_solve_poisson(self, arg2)

    def solve_mov(self, arg2):
        return _ester_wrap.star2d_solve_mov(self, arg2)

    def solve_temp(self, arg2):
        return _ester_wrap.star2d_solve_temp(self, arg2)

    def solve_dim(self, arg2):
        return _ester_wrap.star2d_solve_dim(self, arg2)

    def solve_map(self, arg2):
        return _ester_wrap.star2d_solve_map(self, arg2)

    def solve_Omega(self, arg2):
        return _ester_wrap.star2d_solve_Omega(self, arg2)

    def solve_gsup(self, arg2):
        return _ester_wrap.star2d_solve_gsup(self, arg2)

    def solve_Teff(self, arg2):
        return _ester_wrap.star2d_solve_Teff(self, arg2)

    def solve_definitions(self, arg2):
        return _ester_wrap.star2d_solve_definitions(self, arg2)

    def solve_atm(self, arg2):
        return _ester_wrap.star2d_solve_atm(self, arg2)

    def update_map(self, dR):
        return _ester_wrap.star2d_update_map(self, dR)

    def calc_veloc(self):
        return _ester_wrap.star2d_calc_veloc(self)

    def entropy(self):
        return _ester_wrap.star2d_entropy(self)

    def luminosity(self):
        return _ester_wrap.star2d_luminosity(self)

    def Teff(self):
        return _ester_wrap.star2d_Teff(self)

    def N2(self):
        return _ester_wrap.star2d_N2(self)

    def gsup(self):
        return _ester_wrap.star2d_gsup(self)

    def virial_3P(self):
        return _ester_wrap.star2d_virial_3P(self)

    def virial_L(self):
        return _ester_wrap.star2d_virial_L(self)

    def virial_W(self):
        return _ester_wrap.star2d_virial_W(self)

    def virial_ps(self):
        return _ester_wrap.star2d_virial_ps(self)

    def virial(self):
        return _ester_wrap.star2d_virial(self)

    def energy_test(self):
        return _ester_wrap.star2d_energy_test(self)

    def stream(self):
        return _ester_wrap.star2d_stream(self)

    def apparent_luminosity(self, i):
        return _ester_wrap.star2d_apparent_luminosity(self, i)

    def Lz(self):
        return _ester_wrap.star2d_Lz(self)

    def Mcore(self):
        return _ester_wrap.star2d_Mcore(self)

    def Lzcore(self):
        return _ester_wrap.star2d_Lzcore(self)

    def Rcore(self):
        return _ester_wrap.star2d_Rcore(self)

    def fill(self):
        return _ester_wrap.star2d_fill(self)

    def remap(self, ndomains, npts, nth, nex):
        return _ester_wrap.star2d_remap(self, ndomains, npts, nth, nex)

    def remap_domains(self, ndom, red):
        return _ester_wrap.star2d_remap_domains(self, ndom, red)

    def find_boundaries(self, logTi):
        return _ester_wrap.star2d_find_boundaries(self, logTi)

    def distribute_domains(self, *args):
        return _ester_wrap.star2d_distribute_domains(self, *args)

    def find_boundaries_old(self, pif):
        return _ester_wrap.star2d_find_boundaries_old(self, pif)

    def check_map(self):
        return _ester_wrap.star2d_check_map(self)

    def check_convec(self, p_cc, Rcc):
        return _ester_wrap.star2d_check_convec(self, p_cc, Rcc)

    def kconv(self):
        return _ester_wrap.star2d_kconv(self)

    def add_kconv(self, op, eqn, d):
        return _ester_wrap.star2d_add_kconv(self, op, eqn, d)

    def add_dkconv_dz(self, op, eqn, d):
        return _ester_wrap.star2d_add_dkconv_dz(self, op, eqn, d)

    def check_jacobian(self, op, eqn):
        return _ester_wrap.star2d_check_jacobian(self, op, eqn)

    def hdf5_write(self, filename):
        return _ester_wrap.star2d_hdf5_write(self, filename)

    def hdf5_read(self, input_file, dim):
        return _ester_wrap.star2d_hdf5_read(self, input_file, dim)

    def solve_phi(self):
        return _ester_wrap.star2d_solve_phi(self)

    def plot(self, arg2):
        return _ester_wrap.star2d_plot(self, arg2)
star2d_swigregister = _ester_wrap.star2d_swigregister
star2d_swigregister(star2d)
RADIATIVE = _ester_wrap.RADIATIVE
CORE = _ester_wrap.CORE
CONVECTIVE = _ester_wrap.CONVECTIVE

class star1d(star2d):
    __swig_setmethods__ = {}
    for _s in [star2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, star1d, name, value)
    __swig_getmethods__ = {}
    for _s in [star2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, star1d, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ester_wrap.delete_star1d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _ester_wrap.new_star1d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, input_file, param_file, argc, argv):
        return _ester_wrap.star1d_init(self, input_file, param_file, argc, argv)

    def check_arg(self, arg, val, change_grid):
        return _ester_wrap.star1d_check_arg(self, arg, val, change_grid)

    def read_old(self, input_file):
        return _ester_wrap.star1d_read_old(self, input_file)

    def read(self, input_file, dim=1):
        return _ester_wrap.star1d_read(self, input_file, dim)

    def dump_info(self):
        return _ester_wrap.star1d_dump_info(self)

    def init_solver(self, nvar_add=0):
        return _ester_wrap.star1d_init_solver(self, nvar_add)

    def register_variables(self, op):
        return _ester_wrap.star1d_register_variables(self, op)

    def solve(self, *args):
        return _ester_wrap.star1d_solve(self, *args)

    def solve_poisson(self, arg2):
        return _ester_wrap.star1d_solve_poisson(self, arg2)

    def solve_pressure(self, arg2):
        return _ester_wrap.star1d_solve_pressure(self, arg2)

    def solve_temp(self, arg2):
        return _ester_wrap.star1d_solve_temp(self, arg2)

    def solve_dim(self, arg2):
        return _ester_wrap.star1d_solve_dim(self, arg2)

    def solve_map(self, arg2):
        return _ester_wrap.star1d_solve_map(self, arg2)

    def solve_definitions(self, arg2):
        return _ester_wrap.star1d_solve_definitions(self, arg2)

    def solve_Teff(self, arg2):
        return _ester_wrap.star1d_solve_Teff(self, arg2)

    def solve_gsup(self, arg2):
        return _ester_wrap.star1d_solve_gsup(self, arg2)

    def update_map(self, dR):
        return _ester_wrap.star1d_update_map(self, dR)

    def N2(self):
        return _ester_wrap.star1d_N2(self)

    def luminosity(self):
        return _ester_wrap.star1d_luminosity(self)

    def Teff(self):
        return _ester_wrap.star1d_Teff(self)

    def gsup(self):
        return _ester_wrap.star1d_gsup(self)

    def fill(self):
        return _ester_wrap.star1d_fill(self)

    def check_jacobian(self, op, eqn):
        return _ester_wrap.star1d_check_jacobian(self, op, eqn)

    def plot(self, arg2):
        return _ester_wrap.star1d_plot(self, arg2)

    def spectrum(self, arg2):
        return _ester_wrap.star1d_spectrum(self, arg2)
star1d_swigregister = _ester_wrap.star1d_swigregister
star1d_swigregister(star1d)

class star_evol(star2d):
    __swig_setmethods__ = {}
    for _s in [star2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, star_evol, name, value)
    __swig_getmethods__ = {}
    for _s in [star2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, star_evol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["converged"] = _ester_wrap.star_evol_converged_set
    __swig_getmethods__["converged"] = _ester_wrap.star_evol_converged_get
    if _newclass:
        converged = _swig_property(_ester_wrap.star_evol_converged_get, _ester_wrap.star_evol_converged_set)
    __swig_setmethods__["Lz_obj"] = _ester_wrap.star_evol_Lz_obj_set
    __swig_getmethods__["Lz_obj"] = _ester_wrap.star_evol_Lz_obj_get
    if _newclass:
        Lz_obj = _swig_property(_ester_wrap.star_evol_Lz_obj_get, _ester_wrap.star_evol_Lz_obj_set)

    def __init__(self, *args):
        this = _ester_wrap.new_star_evol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fill(self):
        return _ester_wrap.star_evol_fill(self)

    def read(self, input_file, dim=2):
        return _ester_wrap.star_evol_read(self, input_file, dim)

    def init_solver(self, nvar_add=0):
        return _ester_wrap.star_evol_init_solver(self, nvar_add)

    def register_variables(self, op):
        return _ester_wrap.star_evol_register_variables(self, op)

    def solve_Omega(self, arg2):
        return _ester_wrap.star_evol_solve_Omega(self, arg2)
    __swig_destroy__ = _ester_wrap.delete_star_evol
    __del__ = lambda self: None
star_evol_swigregister = _ester_wrap.star_evol_swigregister
star_evol_swigregister(star_evol)

class plt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plt, name)
    __repr__ = _swig_repr
    if _newclass:
        init = staticmethod(_ester_wrap.plt_init)
    else:
        init = _ester_wrap.plt_init
    if _newclass:
        subplot = staticmethod(_ester_wrap.plt_subplot)
    else:
        subplot = _ester_wrap.plt_subplot
    if _newclass:
        plot = staticmethod(_ester_wrap.plt_plot)
    else:
        plot = _ester_wrap.plt_plot
    if _newclass:
        semilogx = staticmethod(_ester_wrap.plt_semilogx)
    else:
        semilogx = _ester_wrap.plt_semilogx
    if _newclass:
        semilogy = staticmethod(_ester_wrap.plt_semilogy)
    else:
        semilogy = _ester_wrap.plt_semilogy
    if _newclass:
        loglog = staticmethod(_ester_wrap.plt_loglog)
    else:
        loglog = _ester_wrap.plt_loglog
    if _newclass:
        pcolormesh = staticmethod(_ester_wrap.plt_pcolormesh)
    else:
        pcolormesh = _ester_wrap.plt_pcolormesh
    if _newclass:
        axvline = staticmethod(_ester_wrap.plt_axvline)
    else:
        axvline = _ester_wrap.plt_axvline
    if _newclass:
        axhline = staticmethod(_ester_wrap.plt_axhline)
    else:
        axhline = _ester_wrap.plt_axhline
    if _newclass:
        text = staticmethod(_ester_wrap.plt_text)
    else:
        text = _ester_wrap.plt_text
    if _newclass:
        show = staticmethod(_ester_wrap.plt_show)
    else:
        show = _ester_wrap.plt_show
    if _newclass:
        ion = staticmethod(_ester_wrap.plt_ion)
    else:
        ion = _ester_wrap.plt_ion
    if _newclass:
        ioff = staticmethod(_ester_wrap.plt_ioff)
    else:
        ioff = _ester_wrap.plt_ioff
    if _newclass:
        clf = staticmethod(_ester_wrap.plt_clf)
    else:
        clf = _ester_wrap.plt_clf
    if _newclass:
        draw = staticmethod(_ester_wrap.plt_draw)
    else:
        draw = _ester_wrap.plt_draw
    if _newclass:
        legend = staticmethod(_ester_wrap.plt_legend)
    else:
        legend = _ester_wrap.plt_legend
    if _newclass:
        colorbar = staticmethod(_ester_wrap.plt_colorbar)
    else:
        colorbar = _ester_wrap.plt_colorbar
    if _newclass:
        close = staticmethod(_ester_wrap.plt_close)
    else:
        close = _ester_wrap.plt_close
    if _newclass:
        savefig = staticmethod(_ester_wrap.plt_savefig)
    else:
        savefig = _ester_wrap.plt_savefig
    if _newclass:
        title = staticmethod(_ester_wrap.plt_title)
    else:
        title = _ester_wrap.plt_title
    if _newclass:
        pause = staticmethod(_ester_wrap.plt_pause)
    else:
        pause = _ester_wrap.plt_pause
    if _newclass:
        figure = staticmethod(_ester_wrap.plt_figure)
    else:
        figure = _ester_wrap.plt_figure
    if _newclass:
        axis = staticmethod(_ester_wrap.plt_axis)
    else:
        axis = _ester_wrap.plt_axis

    def __init__(self):
        this = _ester_wrap.new_plt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ester_wrap.delete_plt
    __del__ = lambda self: None
plt_swigregister = _ester_wrap.plt_swigregister
plt_swigregister(plt)

def plt_init(noplot=False):
    return _ester_wrap.plt_init(noplot)
plt_init = _ester_wrap.plt_init

def plt_subplot(arg1, clear_axis=False):
    return _ester_wrap.plt_subplot(arg1, clear_axis)
plt_subplot = _ester_wrap.plt_subplot

def plt_plot(*args):
    return _ester_wrap.plt_plot(*args)
plt_plot = _ester_wrap.plt_plot

def plt_semilogx(*args):
    return _ester_wrap.plt_semilogx(*args)
plt_semilogx = _ester_wrap.plt_semilogx

def plt_semilogy(*args):
    return _ester_wrap.plt_semilogy(*args)
plt_semilogy = _ester_wrap.plt_semilogy

def plt_loglog(*args):
    return _ester_wrap.plt_loglog(*args)
plt_loglog = _ester_wrap.plt_loglog

def plt_pcolormesh(arg2, arg3, arg4):
    return _ester_wrap.plt_pcolormesh(arg2, arg3, arg4)
plt_pcolormesh = _ester_wrap.plt_pcolormesh

def plt_axvline(arg2):
    return _ester_wrap.plt_axvline(arg2)
plt_axvline = _ester_wrap.plt_axvline

def plt_axhline(arg2):
    return _ester_wrap.plt_axhline(arg2)
plt_axhline = _ester_wrap.plt_axhline

def plt_text(arg2, arg3, arg4):
    return _ester_wrap.plt_text(arg2, arg3, arg4)
plt_text = _ester_wrap.plt_text

def plt_show(block=False):
    return _ester_wrap.plt_show(block)
plt_show = _ester_wrap.plt_show

def plt_ion():
    return _ester_wrap.plt_ion()
plt_ion = _ester_wrap.plt_ion

def plt_ioff():
    return _ester_wrap.plt_ioff()
plt_ioff = _ester_wrap.plt_ioff

def plt_clf():
    return _ester_wrap.plt_clf()
plt_clf = _ester_wrap.plt_clf

def plt_draw():
    return _ester_wrap.plt_draw()
plt_draw = _ester_wrap.plt_draw

def plt_legend(*args):
    return _ester_wrap.plt_legend(*args)
plt_legend = _ester_wrap.plt_legend

def plt_colorbar():
    return _ester_wrap.plt_colorbar()
plt_colorbar = _ester_wrap.plt_colorbar

def plt_close():
    return _ester_wrap.plt_close()
plt_close = _ester_wrap.plt_close

def plt_savefig(arg2):
    return _ester_wrap.plt_savefig(arg2)
plt_savefig = _ester_wrap.plt_savefig

def plt_title(arg2):
    return _ester_wrap.plt_title(arg2)
plt_title = _ester_wrap.plt_title

def plt_pause(arg1=1e-4):
    return _ester_wrap.plt_pause(arg1)
plt_pause = _ester_wrap.plt_pause

def plt_figure(arg1, width=-1, height=-1):
    return _ester_wrap.plt_figure(arg1, width, height)
plt_figure = _ester_wrap.plt_figure

def plt_axis(*args):
    return _ester_wrap.plt_axis(*args)
plt_axis = _ester_wrap.plt_axis

# This file is compatible with both classic and new-style classes.


